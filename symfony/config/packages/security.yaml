security:
    role_hierarchy:
        ROLE_EDITOR_ACTORS: ROLE_USER
        ROLE_EDITOR_PROJECTS: ROLE_USER
        ROLE_EDITOR_RESSOURCES: ROLE_USER
        ROLE_ADMIN: [ROLE_EDITOR_ACTORS, ROLE_EDITOR_PROJECTS, ROLE_EDITOR_RESSOURCES]
        ROLE_SUPER_ADMIN: ROLE_ADMIN
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users:
            entity:
                class: App\Entity\User\User
                property: email
    firewalls:
        dev:
            pattern: ^/_(profiler|wdt) # for Symfony Web Debug Toolbar
            security: false
        media:
            pattern: ^/media # for Symfony Web Debug Toolbar
            security: false
        api:
            pattern: ^/api/
            stateless: true #Don't use session
            provider: users
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh
        main:
            json_login:
                check_path: /auth
                username_path: email
                password_path: password
                success_handler: App\Security\Authenticator\AuthenticationSuccessHandler
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
        - { path: ^/auth, roles: PUBLIC_ACCESS }
        - { path: ^/api/users, roles: PUBLIC_ACCESS, methods: [POST]}
        - { path: ^/api/users/verify_email, roles: PUBLIC_ACCESS, methods: [GET, POST]}
        - { path: ^/api/actors, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/projects, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/actor_expertises, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/thematics, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/administrative_scopes, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/highlighted_items/main, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/kpis, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/user_likes, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/organisations, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/resources, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/atlases, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/qgis, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/forgot_password, role: PUBLIC_ACCESS }
        - { path: ^/media, role: PUBLIC_ACCESS }
        - { path: ^/api/export-map, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
